package ar.edu.unlam.pb1.dominio;

import ar.edu.unlam.pb1.dominio.enums.TipoDePasta;

public class FabricaDePastas {

	private String nombrePedido;
	private Pasta[] pastas;
	private Pasta[] pedido;

	public FabricaDePastas(String nombrePedido) {
		// TODO: Completar el constructor para que el producto funcione correctamente.
		setNombrePedido(nombrePedido);
		this.pastas = new Pasta[TipoDePasta.values().length];
		this.inicializarFabricaDePastas();
		this.pedido = new Pasta[TipoDePasta.values().length];
		
		for (int i = 0; i < TipoDePasta.values().length; i++) {
			this.pedido [i]= new Pasta(pastas[i].getCodigo(), TipoDePasta.values()[i], 
					pastas[i].getPrecio(),0);
		}
	}

	// TODO: Completar los getters y setters que considere necesarios.
	public void setNombrePedido(String nombre) {
		this.nombrePedido = nombre;
	}
	
	public String getNombrePedido() {
		return nombrePedido;
	}
	

	public Pasta[] getPastas() {
		return pastas;
	}

	public Pasta[] getPedido() {
		return pedido;
	}

	public void setPedido(Pasta[] pedido) {
		this.pedido = pedido;
	}

	public boolean agregarPastaAlPedido(String codigoPasta, int cantidad) {
		// TODO: Se debe buscar la pasta por su codigo y agregarla al pedido solo si hay
		// cantidad suficiente de la pasta solicitada. Luego de agregarla, se debe
		// actualizar la cantidad de la pasta agregada en el array de pastas (considerar
		// el
		// metodo descontarCantidadDePastaDisponible()). Devuelve verdadero en caso de
		// completar la
		// operacion o falso en caso de no poder realizar la operacion por el motivo que
		// sea.
		Pasta pastaDevuelta = obtenerPastaPorCodigo(codigoPasta);
		if(pastaDevuelta==null||pastaDevuelta.getCantidad()<cantidad)
			return false;
		else {
			descontarCantidadDePastaDisponible(codigoPasta, cantidad);
			sumarCantidadDePastaAPedido(codigoPasta, cantidad);
			return true;
		}
	}

	private Pasta obtenerPastaPorCodigo(String codigoPasta) {
		// TODO: Se debe buscar en el array de pastas y devolver la pasta que coincida
		// con el codigoPasta
		// suministrado, o null en caso de que no exista una pasta con ese codigoPasta.
		int i = 0;
		boolean encontrado = false;
		while(i<TipoDePasta.values().length&&encontrado==false) {
			if(pastas[i].getCodigo().equals(codigoPasta))
				encontrado = true;
			else
				i++;
		}
		
		if(encontrado==true)
			return pastas[i];
		else
			return null;
	}

	private void descontarCantidadDePastaDisponible(String codigoPasta, int cantidadADescontar) {
		// TODO: Actualiza la cantidad de pasta en el array de pastas.
		pastas[(Integer.parseInt(codigoPasta)/100)-1].descontarCantidad(cantidadADescontar);
	}
	
	private void sumarCantidadDePastaAPedido(String codigoPasta, int cantidadASumar) {
		// TODO: Actualiza la cantidad de pasta pedida en el array de pedido.
		pedido[(Integer.parseInt(codigoPasta)/100)-1].sumarCantidad(cantidadASumar);
	}

	public double obtenerTotalDelPedido() {
		// TODO: Calcula y devuelve el total del pedido considerando el precio de la
		// pasta y la cantidad solicitada en el pedido.
		return 0.0;
	}

	public Pasta obtenerPastaDeUnTipoDePastaConMenorCantidadEnElPedido(TipoDePasta tipoDePasta) {
		// TODO: Devuelve la pasta que aplique al tipoDePasta indicado, que posea menor
		// cantidad en el pedido.
		int i;
		TipoDePasta menor = null;
		for(i=0;i<TipoDePasta.values().length;i++) {
			if(i==0)
				menor = TipoDePasta.values()[i];
			else if(pedido[i].getCantidadPedida() < pedido[menor.ordinal()].getCantidadPedida())
				menor = TipoDePasta.values()[i];
		}
		return pedido[menor.ordinal()];
	}

	public Pasta[] obtenerPedidoPorPrecioDePastaDescendente() {
		// TODO: Debe ordenar y devolver las pastas en el pedido de manera descendente,
		// debiendo quedar en la primera posicion la pasta de mayor precio.
		int i,j;
		for(i=1;i<TipoDePasta.values().length;i++) {
			for(j=0;j<TipoDePasta.values().length-1;j++) {
				if(pedido[j].getPrecio()<pedido[j+1].getPrecio()) {
					Pasta temp = pedido[j];
					pedido[j] = pedido[j+1];
					pedido[j+1] = temp;
				}
			}
		}
		return pedido;
	}

	private Pasta agregarPasta(String codigo, TipoDePasta tipoDePasta, boolean esRellena, double precio,
			int cantidadEnStock) {
		return new Pasta(codigo, tipoDePasta, esRellena, precio, cantidadEnStock);
	}

	private void inicializarFabricaDePastas() {
		int codigo = 100;
		for (int i = 0; i < TipoDePasta.values().length; i++) {

			this.pastas[i] = this.agregarPasta("" + codigo, TipoDePasta.values()[i], i != 0, 
							((i * 7) + 115.5),(i * 7 + 15));
			codigo += 100;
		}

	}
}
